{
  "name": "bemo-java",
  "tagline": "It's framework prototype.",
  "body": "# Bemo ![Build Status](https://travis-ci.org/bemo-project/bemo-java.svg?branch=master) [![Code Health](https://landscape.io/github/bemo-project/bemo-java/master/landscape.svg?style=flat)](https://landscape.io/github/bemo-project/bemo-java/master)\r\nBemo(back-end mock) - it's simple way to mock your back-end from webdriver UI tests.\r\n\r\n> WARNING: It's framework prototype. Use at your own risk.\r\n\r\n## Installation\r\n\r\nDownload bemo for java:\r\n\r\n    $ git clone https://github.com/bemo-project/bemo-java.git\r\n\r\nBuild maven artifact:\r\n\r\n    $ mvn clean install\r\n\r\nEnjoy!\r\n\r\n### Example usage:\r\n- Test Class\r\n```java\r\npublic class DemoTests {\r\n    private BeMo bemo;\r\n    private ValidatorHandler validatorHandler;\r\n\r\n    @BeforeMethod\r\n    public void beforeMethod() {\r\n        open(\"https://accounts.google.com/SignUp\");\r\n\r\n        bemo = new BeMo(getWebDriver()); // Make BeMo instance.\r\n        validatorHandler = new ValidatorHandler(); //Make Bemo Handler.\r\n    }\r\n\r\n    @AfterMethod\r\n    public void afterMethod() {\r\n            bemo.release(); //Disable and destroy xhook.\r\n    }\r\n\r\n    @Test\r\n    public void testAddressErrorGoogleRegistration() {\r\n        bemo.addHandler(validatorHandler).inject(); // Register Handler and inject to xhook.\r\n\r\n        $(GoogleRegistrationPage.GMAIL_ADDRESS_INPUT).setValue(\"aliaksei.boole\");\r\n        $(GoogleRegistrationPage.SUBMIT_BUTTON).click();\r\n\r\n        $(GoogleRegistrationPage.ERROR_MESSAGE).shouldHave(text(\"It's work.\"));\r\n\r\n        validatorHandler.assertCallCount(1); // Verify that handler was called only once.\r\n        validatorHandler.assertCalledOnceWith(new ValidatorCall()); // Verify that handler was called with this call. \r\n    }\r\n}\r\n```\r\n- ValidatorHandler\r\n```java\r\npublic class ValidatorHandler extends AbstractHandler {\r\n\r\n    public ValidatorResponseBody responseBody = new ValidatorResponseBody();\r\n\r\n    @Override\r\n    public Object getBody() {\r\n        return responseBody; // If string than use as is. If Object than will transform to Json via Gson.\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String> getHeaders() {\r\n        return null; // Null was ignoring.\r\n    }\r\n\r\n    @Override\r\n    public String getUrlPart() {\r\n        return \"InputValidator\"; // This is part of url for setup handler.\r\n    }\r\n\r\n    @Override\r\n    public int getStatus() {\r\n        return 200; // Http status code.\r\n    }\r\n}\r\n```\r\n- ValidatorCall\r\n```java\r\npublic class ValidatorCall extends AbstractCall {\r\n    public ValidatorRequestBody body = new ValidatorRequestBody();\r\n\r\n    public ValidatorCall() {\r\n    }\r\n\r\n    public ValidatorCall(String gmail_address) {\r\n        body.input01.put(\"GmailAddress\", gmail_address);\r\n    }\r\n    \r\n    @Override\r\n    public String getMethod() {\r\n        return \"POST\"; // Http method.\r\n    }\r\n    \r\n    @Override\r\n    public String getUrl() {\r\n        return \"InputValidator?resource=SignUp\"; // Request url.\r\n    }\r\n    \r\n    @Override\r\n    public Object getBody() {\r\n        return body; // Request body.\r\n    }\r\n    \r\n    @Override\r\n    public Map<String, String> getHeaders() {\r\n        return null; // Null will be ignore in verification.\r\n    }\r\n}\r\n```\r\n\r\n# Tech\r\nBemo use [xhook](https://github.com/jpillora/xhook) and [gson](https://github.com/google/gson)  to work.\r\n\r\n# Contributing\r\nFill free to contribute!\r\n\r\nLicense\r\n----\r\n\r\nApache License\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}